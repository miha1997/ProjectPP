

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal Integer NUMBER;
terminal String IDENT;
terminal Boolean BOOLVALUE;
terminal String CHAR;

terminal PROG, PRINT, READ, LBRACE, RBRACE, CONST, SEMI, ASSIGN, COMMA, LBRACKET, RBRACKET;
terminal VOID, LPAREN, RPAREN, INC, DEC, ADD, SUB, NEW, MUL, DIV, MOD;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgramName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj VarDef, ConstValue, ConstDef, ArrayVarDef;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodDecl, MethodName, MethodVarDeclList;
nonterminal rs.etf.pp1.symboltable.concepts.Obj DesignatorStatement, Statement, Expression, Designator, Term;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Factor, DesignatorArrayPart;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, MethodType;

nonterminal MultiDeclList MultiDeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal MultiDecl MultiDecl;
nonterminal ConstDecl ConstDecl;
nonterminal VarDecl VarDecl;
nonterminal ConstDeclList ConstDeclList;
nonterminal VarDeclList VarDeclList;
nonterminal StatementList StatementList;
nonterminal Mulop Mulop;
nonterminal Addop Addop;
nonterminal FactorMethodPart FactorMethodPart;
nonterminal AssignOp AssignOp;

Program ::= (Program) PROG ProgramName:P1 MultiDeclList:M2 LBRACE MethodDeclList:M3 RBRACE {: RESULT=new Program(P1, M2, M3); RESULT.setLine(P1left); :};

ProgramName ::= (ProgramName) IDENT:progName {: RESULT=new ProgramName(progName); RESULT.setLine(progNameleft); :};

MultiDeclList ::= (SimpleMultiDeclList) MultiDeclList:M1 MultiDecl:M2 {: RESULT=new SimpleMultiDeclList(M1, M2); RESULT.setLine(M1left); :}
			| (NoMultiDeclList) {: RESULT=new NoMultiDeclList(); :}/* epsilon */ ;			
MultiDecl ::= (MultiConstDecl) ConstDecl:C1 {: RESULT=new MultiConstDecl(C1); RESULT.setLine(C1left); :}
			| (MultiVarDecl) VarDecl:V1 {: RESULT=new MultiVarDecl(V1); RESULT.setLine(V1left); :};
			
ConstDecl ::= (ConstDecl) CONST Type:T1 ConstDeclList:C2 SEMI {: RESULT=new ConstDecl(T1, C2); RESULT.setLine(T1left); :};
ConstDeclList ::= (SimpleConstDeclList) ConstDeclList:C1 COMMA ConstDef:C2 {: RESULT=new SimpleConstDeclList(C1, C2); RESULT.setLine(C1left); :}
				| (OneConstDeclList) ConstDef:C1 {: RESULT=new OneConstDeclList(C1); RESULT.setLine(C1left); :};
ConstDef ::= (ConstDef) IDENT:constName AssignOp:A1 ConstValue:constValue {: RESULT=new ConstDef(constName, A1, constValue); RESULT.setLine(constNameleft); :};
ConstValue ::= (ConstantValueChar) CHAR:value {: RESULT=new ConstantValueChar(value); RESULT.setLine(valueleft); :}
			| (ConstantValueNum) NUMBER:value {: RESULT=new ConstantValueNum(value); RESULT.setLine(valueleft); :}
			| (ConstantValueBool) BOOLVALUE:value {: RESULT=new ConstantValueBool(value); RESULT.setLine(valueleft); :};
						
VarDecl ::= (SimpleVarDeclNoError)Type:T1 VarDeclList:V2 SEMI {: RESULT=new SimpleVarDeclNoError(T1, V2); RESULT.setLine(T1left); :}
			| (VarDeclError) error:labelErrorText {: parser.report_error("Sintaksna greska, izvrsen oporavak u liniji " + labelErrorTextleft, null); :} {: RESULT=new VarDeclError(); :};
VarDeclList ::= (SimpleVarDeclList) VarDeclList:V1 COMMA VarDef:V2 {: RESULT=new SimpleVarDeclList(V1, V2); RESULT.setLine(V1left); :}
			| (OneVarDeclList) VarDef:V1 {: RESULT=new OneVarDeclList(V1); RESULT.setLine(V1left); :}
			| (VarDeclErrorComma) error:labelErrorText {: parser.report_error("Sintaksna greska, izvrsen oporavak u liniji " + labelErrorTextleft, null); :} {: RESULT=new VarDeclErrorComma(); :};
VarDef ::= (VarDef) IDENT:varName ArrayVarDef:arrayObject {: RESULT=new VarDef(varName, arrayObject); RESULT.setLine(varNameleft); :};

ArrayVarDef ::= (SimpleArrayDef) LBRACKET RBRACKET {: RESULT=new SimpleArrayDef(); :}
			| (NoArrayDef) {: RESULT=new NoArrayDef(); :} /* epsilon */;
			
Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

MethodDeclList ::= (SimpleMethodDeclList) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new SimpleMethodDeclList(M1, M2); RESULT.setLine(M1left); :}
					| (NoMethodDeclList) {: RESULT=new NoMethodDeclList(); :} /* epsilon */;			
MethodDecl ::= (MethodDecl) MethodType:M1 MethodName:M2 LPAREN RPAREN MethodVarDeclList:M3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDecl(M1, M2, M3, S4); RESULT.setLine(M1left); :};

MethodName ::= (MethodName) IDENT:methodName {: RESULT=new MethodName(methodName); RESULT.setLine(methodNameleft); :};

MethodVarDeclList ::= (SimpleMethodVarDeclList) MethodVarDeclList:M1 VarDecl:V2 {: RESULT=new SimpleMethodVarDeclList(M1, V2); RESULT.setLine(M1left); :}
					| (EmptyMethodVariableDeclarationList) {: RESULT=new EmptyMethodVariableDeclarationList(); :}/* epsilon */; 

MethodType ::= (MethodTypeVoid)VOID {: RESULT=new MethodTypeVoid(); :}
			| (MethodTypeOther)Type:typeName {: RESULT=new MethodTypeOther(typeName); RESULT.setLine(typeNameleft); :};

StatementList ::= (SimpleStatementList)StatementList:S1 Statement:S2 {: RESULT=new SimpleStatementList(S1, S2); RESULT.setLine(S1left); :}
				| (NoStatementList) {: RESULT=new NoStatementList(); :}/* epsilon */;
				
Statement ::= (SimpleStatement)DesignatorStatement:D1 SEMI {: RESULT=new SimpleStatement(D1); RESULT.setLine(D1left); :}
			| (PrintStatement)PRINT LPAREN Expression:E1 RPAREN SEMI {: RESULT=new PrintStatement(E1); RESULT.setLine(E1left); :}
			| (PrintStatementArguments)PRINT LPAREN Expression:E1 COMMA NUMBER:N2 RPAREN SEMI {: RESULT=new PrintStatementArguments(E1, N2); RESULT.setLine(E1left); :}
			| (ReadStatement)READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStatement(D1); RESULT.setLine(D1left); :};
			
DesignatorStatement ::= (AssignDesignatorStatement)Designator:D1 AssignOp:A2 Expression:E3 {: RESULT=new AssignDesignatorStatement(D1, A2, E3); RESULT.setLine(D1left); :}
					| (DesignatorInc)Designator:D1 INC {: RESULT=new DesignatorInc(D1); RESULT.setLine(D1left); :}
					| (DesignatorDec)Designator:D1 DEC {: RESULT=new DesignatorDec(D1); RESULT.setLine(D1left); :};

AssignOp ::= (SimpleAssignOp) ASSIGN {: RESULT=new SimpleAssignOp(); :}
		| (AssignOpError) error:labelErrorText {: parser.report_error("Sintaksna greska, izvrsen oporavak u liniji " + labelErrorTextleft, null); :} {: RESULT=new AssignOpError(); :};

Designator ::= (Designator)IDENT:designatorName DesignatorArrayPart:designatorArrayPart {: RESULT=new Designator(designatorName, designatorArrayPart); RESULT.setLine(designatorNameleft); :};

DesignatorArrayPart ::= (SimpleDesignatorArrayPart) LBRACKET Expression:E1 RBRACKET {: RESULT=new SimpleDesignatorArrayPart(E1); RESULT.setLine(E1left); :}
					|	(NoDesignatorArrayPart) {: RESULT=new NoDesignatorArrayPart(); :} /* epsilon */;
			
Expression ::= (SimpleExpression)Term:T1 {: RESULT=new SimpleExpression(T1); RESULT.setLine(T1left); :}
			| (SubExpression)SUB Term:T1 {: RESULT=new SubExpression(T1); RESULT.setLine(T1left); :}
			| (MultiExpression)Expression:E1 Addop:A2 Term:T3 {: RESULT=new MultiExpression(E1, A2, T3); RESULT.setLine(E1left); :};

Term ::= (SimpleTerm)Factor:F1 {: RESULT=new SimpleTerm(F1); RESULT.setLine(F1left); :}
		| (MulTerm)Term:T1 Mulop:M2 Factor:F3 {: RESULT=new MulTerm(T1, M2, F3); RESULT.setLine(T1left); :};

Factor ::= (ConstFactor) ConstValue:C1 {: RESULT=new ConstFactor(C1); RESULT.setLine(C1left); :}
		| (ExpressFactor) LPAREN Expression:E1 RPAREN {: RESULT=new ExpressFactor(E1); RESULT.setLine(E1left); :}
		| (NewFactor) NEW Type:T1 LBRACKET Expression:E2 RBRACKET {: RESULT=new NewFactor(T1, E2); RESULT.setLine(T1left); :}
		| (DesignatorFactor) Designator:D1 FactorMethodPart:F2 {: RESULT=new DesignatorFactor(D1, F2); RESULT.setLine(D1left); :};
		
FactorMethodPart ::= (SimpleFactorMethodPart) LPAREN RPAREN {: RESULT=new SimpleFactorMethodPart(); :}
					| (NoFactorMethodPart) {: RESULT=new NoFactorMethodPart(); :} /* epsilon */;	
					 
Addop ::= (AddopAdd) ADD {: RESULT=new AddopAdd(); :}
		| (AddopSub) SUB {: RESULT=new AddopSub(); :};
		
Mulop ::= (MulopMul) MUL {: RESULT=new MulopMul(); :}
		| (MulopDiv) DIV {: RESULT=new MulopDiv(); :}
		| (MulopMod) MOD {: RESULT=new MulopMod(); :};					 


